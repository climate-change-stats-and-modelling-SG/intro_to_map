---
title: "Introduction to the purrr::map() family"
subtitle: "https://adv-r.hadley.nz/functionals.html#map"
echo: 
  true
format: revealjs
editor: visual
---

# Mapping a function onto a list

map() applies a function over a list/vector and returns a list

::: columns
::: {.column width="60%"}
```{r}

library(purrr)
library(tidyverse)

triple <- function(x) x * 3
map(1:3, triple)
```
:::

::: {.column width="40%"}
![](./figs/map1.png)
:::
:::

# The map family {.smaller}

Variants of map() return vectors of specified class instead of a list

![](./figs/map_family.jpeg)

# The map family {.smaller}

The mapped functions need to output a class that matches the map type

```{r}
#| eval: false
return_number_string <- function(x){
  if(x == 1){
    "one"}else if(x ==2){
      "two"}else if(x == 3){
        "three"} else{NA_character_}
}

map_chr(1:3, return_number_string)
#> [1] "one"   "two"   "three"

map_dbl(1:3, return_number_string)
#> Error in `map_dbl()`:
#> ℹ In index: 1.
#> Caused by error:
#> ! Can't coerce from a string to a double.
```

# Anonymous function and shortcuts {.smaller}

Define functions in-line

```{r}
#| eval: false

map_dbl(mtcars, function(x) length(unique(x)))
#>  mpg  cyl disp   hp drat   wt qsec   vs   am gear carb 
#>   25    3   27   22   22   29   30    2    2    3    6
```

`~` and `.x` as shortcuts for function

```{r}
#| eval: false

map_dbl(mtcars, ~ length(unique(.x)))
#>  mpg  cyl disp   hp drat   wt qsec   vs   am gear carb 
#>   25    3   27   22   22   29   30    2    2    3    6
```

`\(x)` as function argument declaration

```{r}
#| eval: false

map_dbl(mtcars, \(x) length(unique(x)))
#>  mpg  cyl disp   hp drat   wt qsec   vs   am gear carb 
#>   25    3   27   22   22   29   30    2    2    3    6
```

# Map two inputs

:::: {.columns}
::: {.column width="50%"}
![](./figs/map2.jpeg)

```{r}
a <- c(1, 2, 3)
b <- c(4, 5, 6)
map2(a, b, ~.x+.y)

```
:::

::: {.column width="40%"}
![](./figs/map2_family.jpeg)
:::
::::

# Map \>2 inputs

:::: {.columns}
::: {.column width="50%"}
![](./figs/pmap.jpeg)
:::

::: {.column width="40%"}
![](./figs/pmap_family.jpeg)
:::
::::

# Why map? {.smaller}

Creating a nested tibble with list column

```{r}
dat <- mtcars %>%
  group_by(cyl) %>% 
  nest() 

dat

```

```{r}
dat$data[1]

```

# Why map? {.smaller}

Now we can apply functions over the list column using map

```{r}
dat <- mtcars %>%
  group_by(cyl) %>% 
  nest() %>% 
  mutate(modl = map(data, ~lm(mpg ~ wt, data = .x)), 
         sumry = map(modl, summary), 
         r2 = map_dbl(sumry, ~.x[["r.squared"]]))
dat
```

# Why map? Part 2

- Normally, mutate creates a new column by creating a new vector with an element for each row
- map functions allow you to apply a scalar function to a vector

# Why map? Part 2{.smaller}

This function takes a scalar input (from: https://dcl-prog.stanford.edu/purrr-mutate.html)

```{r}
emoticons_1 <- function(x) {
  if (x == "happy") {
    ":)"
  } else if (x == "sad") {
    ":("
  } else {
    "Feeling too complex for emoticons"
  }
}

```


# Why map? Part 2

We want to return the emoticon for each of the feelings in this tibble.

```{r}

df <- 
  tibble(
    feeling = c("sad", "compunctious", "happy")
  ) 

```

. . . 

```{r, eval=FALSE}

df <- 
  tibble(
    feeling = c("sad", "compunctious", "happy")
  ) %>% 
  mutate(emoji = emoticons_1(feeling))

#> Error in `mutate()`:
#> ℹ In argument: `emoji = emoticons_1(feeling)`.
#> Caused by error in `if (x == "happy") ...`:
#> ! the condition has length > 1

```

# Why map? Part 2

So map over the vector

```{r}

df <- 
  tibble(
    feeling = c("sad", "compunctious", "happy")
  ) 

feeling <- df$feeling

map_chr(feeling, emoticons_1)

```

# Why map? Part 2

Or in tidyverse

```{r}

df <- 
  tibble(
    feeling = c("sad", "compunctious", "happy")
  )


df %>% 
  mutate(emoticon = map_chr(feeling, emoticons_1))
```
